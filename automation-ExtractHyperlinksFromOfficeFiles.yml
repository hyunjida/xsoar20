args:
- description: The entry id of the file to extract hyperlinks from.
  name: entry_id
  required: true
comment: 'Extracts hyperlinks from office files. Supported file types are: xlsx, docx,
  pptx.'
commonfields:
  id: ExtractHyperlinksFromOfficeFiles
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.14.2
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/office-utils:2.0.0.88298
engineinfo: {}
mainengineinfo: {}
name: ExtractHyperlinksFromOfficeFiles
outputs:
- contextPath: ExtractedHyperLink.URL
  description: The URL of the extracted hyperlink.
  type: String
- contextPath: ExtractedHyperLink.FileName
  description: The office file from which the hyperlinks are extracted.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ExtractHyperlinksFromOfficeFiles', 'start', __line__())
  ### pack version: 1.14.2


  import openpyxl
  from docx import Document
  from pptx import Presentation
  import zipfile
  import pandas as pd


  def extract_hyperlinks_from_xlsx(file_path: str) -> Set:
      with zipfile.ZipFile(file_path, "r") as zf:
          xmls = [zf.read(fn) for fn in zf.infolist()
                  if fn.filename.startswith("xl/drawings/_rels/")]

      urls = set()

      for xml_data in xmls:
          df = pd.read_xml(xml_data)

          if "TargetMode" in df.columns:
              filtered_df = df.loc[df["TargetMode"].eq("External"), "Target"]
              urls |= set(filtered_df)

      wb = openpyxl.load_workbook(file_path)
      for sheet in wb:
          for row in sheet.iter_rows():
              for cell in row:
                  if cell.hyperlink:
                      urls.add(cell.hyperlink.target)

      return urls


  def extract_hyperlinks_from_docx(file_path: str) -> Set:
      doc = Document(file_path)
      links = set()
      for para in doc.paragraphs:
          for hyper in para.hyperlinks:
              if hyper.address:
                  links.add(hyper.address)
      return links


  def extract_hyperlinks_from_pptx(file_path: str) -> Set:
      prs = Presentation(file_path)
      links = set()
      for slide in prs.slides:
          for shape in slide.shapes:
              if shape.has_text_frame:
                  for paragraph in shape.text_frame.paragraphs:
                      for run in paragraph.runs:
                          if run.hyperlink and run.hyperlink.address:
                              links.add(run.hyperlink.address)
              if shape.click_action and shape.click_action.hyperlink.address:
                  links.add(shape.click_action.hyperlink.address)

      return links


  def extract_hyperlink_by_file_type(file_name: str, file_path: str) -> CommandResults:
      if file_name.endswith('.xlsx'):
          result = extract_hyperlinks_from_xlsx(file_path)
      elif file_name.endswith('.docx'):
          result = extract_hyperlinks_from_docx(file_path)
      elif file_name.endswith('.pptx'):
          result = extract_hyperlinks_from_pptx(file_path)
      else:
          raise ValueError("Unsupported file type. Supported types are: 'xlsx, docx, pptx'")
      if result:
          urls_str = "\n".join(result)
          hr = f'### Extracted Hyperlinks\n\n{urls_str}'
      else:
          hr = '**No hyperlinks.**'

      output = [{'URL': url, 'FileName': file_name} for url in result]
      return CommandResults(
          outputs=output,
          outputs_prefix='ExtractedHyperLink',
          outputs_key_field=['URL', 'FileName'],
          readable_output=hr,
          raw_response=list(result)
      )


  def main():  # pragma: no cover
      try:
          entry_id = demisto.args().get("entry_id")
          file_result = demisto.getFilePath(entry_id)
          if not file_result:
              raise ValueError(f"Couldn't find entry id: {entry_id}")
          file_name = file_result.get('name')
          file_path = file_result.get('path')
          os.rename(f'./{file_path}', file_name)
          return_results(extract_hyperlink_by_file_type(file_name=file_name, file_path=os.path.realpath(file_name)))
      except Exception as ex:
          return_error(f'Failed to execute ExtractHyperlinksFromOfficeFiles. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ExtractHyperlinksFromOfficeFiles', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
